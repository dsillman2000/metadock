global:
  docstring: |
    Jinja namespace for the global Metadock environment, including all global macros, filters, and namespaces.

    **Macros**:

        debug

    **Namespaces**:

        html
        md

    **Filters**:

        chain
        inline
        with_prefix
        with_suffix
        zip

  macros:
    debug:
      docstring: Prints a debug message to stdout, and returns an empty string.
      example: |
        >>> from metadock.env import MetadockEnv
        >>> env = MetadockEnv().jinja_environment()
        >>> env.from_string("No changes!{{ debug('This is a debug message.') }}").render()
        This is a debug message.
        'No changes!'
      source_file: metadock/env.py
      method_name: metadock.env.MetadockEnv.debug
      signature: "(self, message: str) -> None"
      intellisense:
        snippet_key: Debug message
        snippet_body:
          - debug($1)

  filters:
    chain:
      docstring: |
        Filter which flattens a sequence of iterables into a single iterable.
      example: |
        >>> from metadock.env import MetadockEnv
        >>> env = MetadockEnv().jinja_environment()
        >>> env.from_string('{{ {"first": 1, "second": 2}.items() | chain | join(" ") }}').render()
        'first 1 second 2'
      source_file: metadock/env.py
      method_name: metadock.env.MetadockEnv.chain_filter
      signature: "(self, iterables: Sequence[Iterable[Any]]) -> Iterable[Any]"
      intellisense:
        snippet_key: Chain iterables
        snippet_body:
          - chain

    inline:
      docstring: |
        Filter which inlines a string by replacing all newlines with spaces, and all double spaces with single spaces.
      example: |
        >>> from metadock.env import MetadockEnv
        >>> env = MetadockEnv().jinja_environment()
        >>> env.from_string("{{ 'This is a multi-line string.\nThis is the second line.\nAnd the third.' | inline }}").render()
        'This is a multi-line string. This is the second line. And the third.'
      source_file: metadock/env.py
      method_name: metadock.env.MetadockEnv.inline_filter
      signature: "(self, value: str) -> str"
      intellisense:
        snippet_key: Inline text
        snippet_body:
          - inline

    with_prefix:
      docstring: |
        Filter which prepends a prefix to a string, with an optional separator.
      example: |
        >>> from metadock.env import MetadockEnv
        >>> env = MetadockEnv().jinja_environment()
        >>> env.from_string("{{ 'This is a string.' | with_prefix('Prefix') }}").render()
        'PrefixThis is a string.'
        >>> env.from_string("{{ 'This is a string.' | with_prefix('Prefix: ', sep = ' : ') }}").render()
        'Prefix : This is a string.'
      source_file: metadock/env.py
      method_name: metadock.env.MetadockEnv.with_prefix_filter
      signature: "(self, value: str, prefix: str, sep: str = '') -> str"
      intellisense:
        snippet_key: With prefix
        snippet_body:
          - with_prefix($1)

    with_suffix:
      docstring: |
        Filter which appends a suffix to a string, with an optional separator.
      example: |
        >>> from metadock.env import MetadockEnv
        >>> env = MetadockEnv().jinja_environment()
        >>> env.from_string("{{ 'This is a string' | with_suffix('Suffix') }}").render()
        'This is a stringSuffix'
        >>> env.from_string("{{ 'This is a string' | with_suffix('Suffix', sep = ' : ') }}").render()
        'This is a string : Suffix'
      source_file: metadock/env.py
      method_name: metadock.env.MetadockEnv.with_suffix_filter
      signature: "(self, value: str, suffix: str, sep: str = '') -> str"
      intellisense:
        snippet_key: With suffix
        snippet_body:
          - with_suffix($1)

    zip:
      docstring: |
        Filter which zips an input iterable with one or more iterables.
      example: |
        >>> from metadock.env import MetadockEnv
        >>> env = MetadockEnv().jinja_environment()
        >>> env.from_string("{{ ['a', 'b', 'c'] | zip([1, 2, 3]) | list }}").render()
        "[('a', 1), ('b', 2), ('c', 3)]"
      source_file: metadock/env.py
      method_name: metadock.env.MetadockEnv.zip_filter
      signature: "(self, input_iterable: Iterable[Any], *iterables: Iterable[Any]) -> Iterable[tuple[Any, ...]]"
      intellisense:
        snippet_key: Zip iterables
        snippet_body:
          - zip($1)
